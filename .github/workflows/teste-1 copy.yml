name: hello-world
on:
  push:
    branches:
      - "main"
jobs:
  my-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: my-step
        run: echo "Hello World!"
      - name: Get the latest merge commit
        id: get_latest_merge
        run: |
          latest_merge_commit=$(git log --merges -n 1 --format="%H" || echo "N/A")
          echo "Latest merge commit: $latest_merge_commit"
          echo "::set-output name=latest_merge_commit::$latest_merge_commit"

      - name: Get merged pull requests since the latest merge
        id: get_prs
        run: |
          latest_merge_commit="${{ steps.get_latest_merge.outputs.latest_merge_commit }}"

          if [ "$latest_merge_commit" = "N/A" ]; then
            echo "No previous merge commits found. Setting PR URLs to 'N/A'."
            pr_urls="N/A"
            commits=$(git log --pretty=oneline --no-merges "$latest_merge_commit"..HEAD | sed 's/^/ - /')
          else
            # Obtém os commits desde o último merge até o commit atual
            commits=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/compare/${latest_merge_commit}...${{ github.sha }}")
            
            # Filtra os PRs mesclados
            prs=$(echo "$commits" | jq -r '.commits | map(select(.commit.message | contains("Merge pull request #"))) | map(.commit.message | capture("Merge pull request #(?<pr_number>[0-9]+)")) | map(.pr_number) | unique')
            
            if [ -z "$prs" ]; then
              pr_urls="N/A"
              commits="No commits since the last merge."
            else
              pr_urls=""
              for pr in $prs; do
                pr_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls/$pr")
                pr_url=$(echo "$pr_info" | jq -r '.html_url')
                pr_urls+="$pr_url\n"
              done
            fi
            
            # Remove a última quebra de linha
            pr_urls=${pr_urls%\\n}
            
            # Salva os URLs dos PRs em um arquivo temporário
            echo -e "$pr_urls" > pr_urls.txt
          fi

      - name: Set output with PR URLs and Commits
        id: set_output
        run: |
          if [ -f pr_urls.txt ]; then
            pr_urls=$(cat pr_urls.txt)
          else
            pr_urls="N/A"
          fi
          echo "::set-output name=pr_urls::$pr_urls"
          echo "::set-output name=commits::$commits"

      - name: Notify Discord
        uses: rjstone/discord-webhook-notify@v1
        with:
          severity: info
          description: Homologação
          text: | 
            <@&689593112271519745> Homologação **SGPA-API** Aplicada!
             - **PullRequests:** ${{ steps.set_output.outputs.pr_urls }}
             - **Commits desde o ultimo merge:** ${{ steps.set_output.outputs.commits }}
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
